# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2016-04-27 20:33
from __future__ import unicode_literals

import utilities.validators
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import markymark.fields
import mptt.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('locations', '0004_geometrystore_centroid'),
    ]

    operations = [
        migrations.CreateModel(
            name='CompanyDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sector', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Primary (raw materials)'), (2, 'Secondary (manufacturing)'), (3, 'Tertiary (sales and services)')], null=True)),
            ],
            options={
                'verbose_name_plural': 'company details',
            },
        ),
        migrations.CreateModel(
            name='CompanyStructure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Structure')),
                ('slug', models.SlugField(allow_unicode=True, max_length=110)),
            ],
        ),
        migrations.CreateModel(
            name='CompanyType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(allow_unicode=True, max_length=110)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dictionary', django.contrib.postgres.fields.jsonb.JSONField()),
                ('url', models.CharField(blank=True, max_length=1000, validators=[utilities.validators.URLLikeValidator])),
                ('label', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(allow_unicode=True, max_length=110)),
                ('description', markymark.fields.MarkdownField(blank=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('notes', markymark.fields.MarkdownField(blank=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(allow_unicode=True, max_length=110)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='FinancingOrganizationDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approved_capital', models.DecimalField(blank=True, decimal_places=2, max_digits=17, null=True)),
                ('moodys_credit_rating', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Aaa'), (2, 'Aa1'), (3, 'Aa2'), (4, 'Aa3'), (5, 'A1'), (6, 'A2'), (7, 'A3'), (8, 'Baa1'), (9, 'Baa2'), (10, 'Baa3'), (11, 'Ba1'), (12, 'Ba2'), (13, 'Ba3'), (14, 'B1'), (15, 'B2'), (16, 'B3'), (17, 'Caa1'), (18, 'Caa2'), (19, 'Caa3'), (20, 'Ca'), (21, 'C')], null=True)),
                ('fitch_credit_rating', models.PositiveSmallIntegerField(blank=True, choices=[(101, 'AAA'), (102, 'AA+'), (103, 'AA'), (104, 'AA−'), (105, 'A+'), (106, 'A'), (107, 'A−'), (108, 'BBB+'), (109, 'BBB'), (110, 'BBB−'), (111, 'BB+'), (112, 'BB'), (113, 'BB−'), (114, 'B+'), (115, 'B'), (116, 'B−'), (117, 'CCC+'), (118, 'CCC'), (119, 'CCC−'), (120, 'CC'), (121, 'C'), (122, 'DDD'), (123, 'DD'), (124, 'D')], null=True)),
                ('sp_credit_rating', models.PositiveSmallIntegerField(blank=True, choices=[(201, 'AAA'), (202, 'AA+'), (203, 'AA'), (204, 'AA−'), (205, 'A+'), (206, 'A'), (207, 'A−'), (208, 'BBB+'), (209, 'BBB'), (210, 'BBB−'), (211, 'BB+'), (212, 'BB'), (213, 'BB−'), (214, 'B+'), (215, 'B'), (216, 'B−'), (217, 'CCC+'), (218, 'CCC'), (219, 'CCC−'), (220, 'CC'), (221, 'C'), (222, 'RD'), (223, 'SD'), (224, 'D')], null=True, verbose_name='Standard & Poors Credit Rating')),
                ('scope_of_operations', models.CharField(blank=True, max_length=100)),
                ('procurement', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'verbose_name_plural': 'financing organization details',
            },
        ),
        migrations.CreateModel(
            name='FinancingType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(allow_unicode=True, max_length=110)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='GovernmentDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': 'government details',
            },
        ),
        migrations.CreateModel(
            name='MilitaryDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ruling_party', models.BooleanField(default=True)),
                ('budget', models.DecimalField(blank=True, decimal_places=2, max_digits=17, null=True)),
            ],
            options={
                'verbose_name_plural': 'military details',
            },
        ),
        migrations.CreateModel(
            name='MultilateralDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': 'multilateral details',
            },
        ),
        migrations.CreateModel(
            name='MultilateralType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(allow_unicode=True, max_length=110)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='NGODetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('endowment', models.DecimalField(blank=True, decimal_places=2, max_digits=17, null=True)),
            ],
            options={
                'verbose_name_plural': 'NGO details',
            },
        ),
        migrations.CreateModel(
            name='NGOType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(allow_unicode=True, max_length=110)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
            ],
            options={
                'verbose_name': 'NGO type',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(allow_unicode=True, max_length=110)),
                ('notes', markymark.fields.MarkdownField(blank=True)),
                ('founding_date', models.DateField(blank=True, null=True)),
                ('dissolution_date', models.DateField(blank=True, null=True)),
                ('staff_size', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Staff/Personnel count')),
                ('mission', markymark.fields.MarkdownField(blank=True, verbose_name='Mandate/Mission Statement')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('countries', models.ManyToManyField(blank=True, to='locations.Country')),
                ('headquarters', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='locations.Place')),
            ],
            options={
                'verbose_name_plural': 'all organizations',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='OrganizationShareholder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='% Share')),
                ('investment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='facts.FinancingOrganizationDetails')),
                ('shareholder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='facts.Organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published', models.BooleanField(default=False)),
                ('identifier', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('given_name', models.CharField(help_text="A person's given or 'first' name(s).", max_length=100, verbose_name='First name')),
                ('additional_name', models.CharField(blank=True, help_text="An additional name for a person,                                                                               such as a 'middle' name.", max_length=100, verbose_name='Middle name')),
                ('family_name', models.CharField(blank=True, help_text="A person's family or 'last' name(s).", max_length=140, verbose_name='Last name')),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('notes', markymark.fields.MarkdownField(blank=True)),
                ('citizenships', models.ManyToManyField(blank=True, to='locations.Country')),
                ('events', models.ManyToManyField(blank=True, to='facts.Event')),
            ],
            options={
                'verbose_name_plural': 'people',
            },
        ),
        migrations.CreateModel(
            name='PersonShareholder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='% Share')),
                ('investment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='facts.FinancingOrganizationDetails')),
                ('shareholder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='facts.Person')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PoliticalDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ruling_party', models.BooleanField(default=True)),
                ('countries', models.ManyToManyField(blank=True, to='locations.Country')),
            ],
            options={
                'verbose_name_plural': 'poltitical details',
            },
        ),
        migrations.CreateModel(
            name='PoliticalType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(allow_unicode=True, max_length=110)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='facts.PoliticalType')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='facts.Organization')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='facts.Person')),
            ],
            options={
                'verbose_name_plural': 'positions (jobs)',
                'verbose_name': 'position (job)',
            },
        ),
        migrations.AddField(
            model_name='politicaldetails',
            name='org_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='facts.PoliticalType', verbose_name='type'),
        ),
        migrations.AddField(
            model_name='politicaldetails',
            name='organization',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='facts.Organization'),
        ),
    ]
