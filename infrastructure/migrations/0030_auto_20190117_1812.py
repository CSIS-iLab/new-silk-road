# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2019-01-17 23:12
from __future__ import unicode_literals

from django.db import migrations
from django.db.models import F


def move_notes(apps, schema_editor):
    Project = apps.get_model('infrastructure', 'Project')
    PowerPlant = apps.get_model('infrastructure', 'PowerPlant')

    # move PowerPlant notes [description -> notes]
    # only update powerplants that have descriptions but are missing notes
    pps_with_desc = PowerPlant.objects.exclude(description='').filter(notes='')
    print(f"Moving desc->notes on {pps_with_desc.count()} power plants")
    # copy into notes field, clear description fields
    pps_with_desc.update(notes=F('description'), description='', description_rendered='')

    # move Project notes (powerplants only) [description -> notes]
    pp_projects_with_desc = Project.objects.filter(infrastructure_type__name='Powerplant')
    pp_projects_with_desc = pp_projects_with_desc.exclude(description='').filter(notes='')
    print(f"Moving desc->notes on {pp_projects_with_desc.count()} projects")
    # copy into notes field, clear description fields
    pp_projects_with_desc.update(notes=F('description'), description='', description_rendered='')


def move_notes_back(apps, schema_editor):
    Project = apps.get_model('infrastructure', 'Project')
    PowerPlant = apps.get_model('infrastructure', 'PowerPlant')

    # move PowerPlant notes [notes -> description]
    pps_with_notes = PowerPlant.objects.exclude(notes='').filter(description='')
    print(f"Moving notes->desc on {pps_with_notes.count()} power plants")
    # copy into description field, clear note field
    pps_with_notes.update(description=F('notes'), notes='')
    # description_rendered is populated in PowerPlant.save()
    for pp in pps_with_notes:
        pp.save()

    # move Project notes (powerplants only) [notes -> description]
    pp_projects_with_notes = Project.objects.filter(infrastructure_type__name='Powerplant')
    pp_projects_with_notes = pp_projects_with_notes.exclude(notes='').filter(description='')
    print(f"Moving notes->desc on {pp_projects_with_notes.count()} projects")
    # copy into description field, clear note field
    pp_projects_with_notes.update(description=F('notes'), notes='')
    # description_rendered is populated in Project.save()
    for project in pp_projects_with_notes:
        project.save()


class Migration(migrations.Migration):

    dependencies = [
        ('infrastructure', '0029_powerplant_notes'),
    ]

    operations = [
        migrations.RunPython(move_notes, move_notes_back),
    ]
